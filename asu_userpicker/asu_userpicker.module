<?php

/**
 * @file
 * asu_userpicker.module - ASU Userpicker code.
 *
 * @author
 * Michael Samuelson <mlsamuel@asu.edu> / <mlsamuelson@gmail.com>
 *
 * Module provides a custom user autocomplete field widget for picking users in
 * Drupal and ASU Solr, and creating those not yet in Drupal.
 *
 */

/*********************************************************************
  DRUPAL HOOKS
*********************************************************************/


/*********************************************************************
  INTERNAL
*********************************************************************/


/*********************************************************************
  API
*********************************************************************/

/**
 * Autocomplete Solr query function.
 *
 * @param $string
 *   String to seach on.
 *
 * @return
 *   Array of raw results from Solr.
 */
function asu_userpicker_search_solr($string) {

  /* @todo Add back the optional filter and wildcard params so this becomes a
   *   more useful multi-tool function:
   *
   * @param $filters
   *   Array of Solr filters to consult in query. Some examples are
   *   asuriteid, cn, and eid.
   *
   * @param $wildcard
   *   Boolean Whether or not to use wildcards. Don't if you've got int based
   *    values.
   */

  // Search Solr, ala https://webapp4-qa.asu.edu/solr/directory/select?q={!edismax}*SOMESEARCHSTRING*&rows=10&wt=json
  $solr_base_url = \Drupal::config('asu_userpicker.settings')->get('asu_userpicker_solr_query_url');
  // @todo Note the hard-coded # of rows in the query params.
  $solr_query_url = $solr_base_url. '?q=%7B!edismax%7D*' . urlencode(\Drupal\Component\Utility\Html::escape($string)) . '*&rows=20&wt=json';

  $client = \Drupal::httpClient();
  try {
    $response = $client->request('GET', $solr_query_url);
    $data = $response->getBody()->getContents();

    // Return the response.
    $solr_data = \Drupal\Component\Serialization\Json::decode($data);
    return $solr_data;
  }
  catch (RequestException $e) {
    watchdog_exception('asu_userpicker', $e);
    // \Drupal::logger('asu_userpicker')->error($e);
    return [];
  }
  return [];
}

/**
 * Autocomplete local Drupal query function.
 *
 * @param $string
 *   String to search on.
 *
 * @return
 *   Query results object.
 */
function asu_userpicker_search_local($string) {

  // @todo how best to handle escaping here so cases like
  // Smith-Jones and O'Malley are searchable...
  // Need to consider this same issue for 
  // asu_userpicker_search_local() ?
  $string = \Drupal\Component\Utility\Html::escape($string);

  $connection = \Drupal::database();

  // Query {users_field_data}.name
  $query = $connection->select('users_field_data', 'ufd');
  // JOIN {authmap} with {users_field_data}
  $query->leftJoin('authmap', 'am', 'am.uid = ufd.uid');

  // FIELDS
  $query->fields('am', array('uid', 'authname'));
  $query->fields('ufd', array('name', 'mail'));

  // @todo add in role and status config settings... note the following are the global default settings.
  // \Drupal::config('asu_userpicker.settings')->get('asu_userpicker_referenceable_roles');
  // \Drupal::config('asu_userpicker.settings')->get('asu_userpicker_referenceable_status');

  // Add in admin configured user fields, if any.
  // @todo We've removed the configurable search fields from the settings for
  // now and we only search locally on username and mail.
  // @FIXME
  // Could not extract the default value because it is either indeterminate, or
  // not scalar. You'll need to provide a default value in
  // config/install/asu_userpicker.settings.yml and config/schema/asu_userpicker.schema.yml.
  $user_field_conditions = '';
  /*
  $user_search_fields = array_filter(\Drupal::config('asu_userpicker.settings')->get('asu_userpicker_search_user_fields'));
  foreach ($user_search_fields as $user_search_field) {

    $clean_user_search_field = \Drupal\Component\Utility\Html::escape($user_search_field);

    // JOIN {<checked user field>} with {users}
    $query->leftJoin('field_data_' . $clean_user_search_field, 'f_' . $clean_user_search_field, 'f_' . $clean_user_search_field . '.entity_id = u.uid');
    // FIELDS to return in query
    $query->fields('f_' . $clean_user_search_field, array($clean_user_search_field . '_value'));
    // CONDITIONS in where clause
    $user_field_conditions .= " OR (f_" . $clean_user_search_field . "." . $clean_user_search_field . "_value LIKE '%".$string."%')";

  }
  */
  $query->where("((ufd.name LIKE '%".$string."%') OR (ufd.mail LIKE '%".$string."%') OR (am.authname LIKE '%".$string."%')" . $user_field_conditions .")");

  $local_results = $query->orderRandom()->execute();

  return $local_results;
}

/**
 * Helper function to check on existence of ASURITE ID.
 *
 * @param $string
 *   String ASURITE ID to seach on.
 * @param $bool
 *   Boolean Whether or not to return value as boolean.
 *
 * @return
 *   Mixed/Boolean True if ASURITE ID exists.
 */
function asu_userpicker_asurite_exists($string, $bool = TRUE) {

  if ($bool) {
    return (bool) asu_userpicker_get_solr_profile_record($string);
  }
  else {
    return asu_userpicker_get_solr_profile_record($string);
  }
}

/**
 * API function to get a person/profile record from Solr.
 *
 * @param string/int $asurite An ASURITE.
 *
 * @return array Solr record for profile.
 */
function asu_userpicker_get_solr_profile_record($asurite) {

  // Abort.
  if (is_null($asurite)) {
    return;
  }

  // Do Solr query ala https://webapp4.asu.edu/solr/directory/select?q=%7B!edismax%7DasuriteId:myasurite&rows=1&wt=json
  // And populate $record.
  $solr_base_url = \Drupal::config('asu_userpicker.settings')->get('asu_userpicker_solr_query_url');
  $solr_query_url = $solr_base_url . '?q=%7B!edismax%7DasuriteId:' . \Drupal\Component\Utility\Html::escape($asurite) . '&rows=1&wt=json';

  $client = \Drupal::httpClient();
  try {
    $response = $client->request('GET', $solr_query_url);
    $data = $response->getBody()->getContents();

    $solr_data = \Drupal\Component\Serialization\Json::decode($data);

    // Check here that the asurite ID is a 100% match with the record, as
    // Solr does a "contains" match.
    $record = NULL;
    $solr_count = $solr_data['response']['numFound'];
    if ($solr_count > 0) {
      foreach($solr_data['response']['docs'] as $doc_delta => $doc) {
        if ($doc['asuriteId'] == $asurite) {
          $record = $solr_data['response']['docs'][$doc_delta];
        }
      }
    }
    return $record; // Should only be one.
  }
  catch (RequestException $e) {
    watchdog_exception('asu_userpicker', $e);
    // \Drupal::logger('asu_userpicker')->error($e);
    return [];
  }
  return [];
}


/*********************************************************************
  DEVELOPER NOTES 
*********************************************************************/


/* Possibly helpful bits of code.

  // from user form alter done by cas module...
  $cas_user_manager = \Drupal::service('cas.user_manager');
  $account = $form_state->getFormObject()->getEntity();
  $cas_username = $cas_user_manager->getCasUsernameForAccount($account->id());

  // example of working with a form_state
  $cas_username = $form_state->getValue('cas_username');


    if (!empty($cas_username)) {
      $cas_user_manager = \Drupal::service('cas.user_manager');
      $existing_uid = $cas_user_manager->getUidForCasUsername($cas_username);
      $user_being_edited = $form_state->getFormObject()->getEntity();

      if ($existing_uid && $existing_uid !== $user_being_edited->id()) {
        $form_state->setError($form['cas_username'], t('The specified CAS username is already in use by another user.'));
      }
    }


  // From _cas_user_form_submit()
  $cas_user_manager = \Drupal::service('cas.user_manager');
  $account = $form_state->getFormObject()->getEntity();
  if ($form_state->getValue('cas_username')) {
    $cas_user_manager->setCasUsernameForAccount($account, $form_state->getValue('cas_username'));
  }
  else {
    $cas_user_manager->removeCasUsernameForAccount($account);
  }


    $cas_user_manager = \Drupal::service('cas.user_manager');
    if ($cas_user_manager->getCasUsernameForAccount($uid)) {


// *************************
    $cas_user_manager = \Drupal::service('cas.user_manager');
    $cas_user_manager->register($authname, array $property_values = []);
    $cas_user_manager->getCasUsernameForAccount($uid);
    $cas_user_manager->getUidForCasUsername($cas_username);
    $cas_user_manager->setCasUsernameForAccount(UserInterface $account, $cas_username)
    $cas_user_manager->getEmailForNewAccount(CasPropertyBag $cas_property_bag);
    $cas_user_manager->
    $cas_user_manager->


  use Drupal\externalauth\ExternalAuth;
  // has ->load($authname, $provider)
  // has ->register($authname, $provider, $account_data = array(), $authmap_data = NULL)


  use Drupal\externalauth\Authmap;
  // has ->save(UserInterface $account, $provider, $authname, $data = NULL)
  // and more...

 */